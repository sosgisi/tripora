// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  phonenumber  String?
  location     String?
  bio          String?
  profileImage String?
  password     String
  role         String    @default("USER")
  createdAt    DateTime  @default(now())
  Booking      Booking[]
  Review       Review[]
}

model Provider {
  id                  String   @id @default(uuid())
  companyName         String
  companyEmail        String   @unique
  companyPhonenumber  String?
  companyLocation     String?
  companyDescription  String?
  companyProfileImage String?
  companyAddress      String?
  companyCategory     String?
  password            String
  trips               Trip[]
  createdAt           DateTime @default(now())
}

model Trip {
  id                  String      @id @default(uuid())
  provider            Provider    @relation(fields: [providerId], references: [id])
  providerId          String
  title               String
  description         String
  location            String
  departureDate       DateTime
  returnDate          DateTime
  price               Int
  maxParticipants     Int
  currentParticipants Int         @default(0)
  isActive            Boolean     @default(true)
  createdAt           DateTime    @default(now())
  images              TripImage[]
  bookings            Booking[]
  reviews             Review[]
}

model TripImage {
  id       String @id @default(uuid())
  trip     Trip   @relation(fields: [tripId], references: [id])
  tripId   String
  imageUrl String
}

model Booking {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  trip              Trip          @relation(fields: [tripId], references: [id])
  tripId            String
  participantsCount Int
  totalPrice        Int
  status            BookingStatus
  createdAt         DateTime      @default(now())
  payment           Payment?
}

model Payment {
  id              String        @id @default(uuid())
  booking         Booking       @relation(fields: [bookingId], references: [id])
  bookingId       String        @unique
  paymentMethod   String
  paymentProofUrl String?
  paymentStatus   PaymentStatus
  paidAt          DateTime?
}

model Review {
  id        String   @id @default(uuid())
  trip      Trip     @relation(fields: [tripId], references: [id])
  tripId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int      @default(5)
  comment   String
  createdAt DateTime @default(now())
}

enum Role {
  admin
  provider
  user
}

enum BookingStatus {
  pending
  paid
  cancelled
}

enum PaymentStatus {
  pending
  paid
  failed
}
